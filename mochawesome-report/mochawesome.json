{
  "stats": {
    "suites": 7,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2017-06-28T06:42:37.634Z",
    "end": "2017-06-28T06:42:39.509Z",
    "duration": 1875,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "GET /",
        "suites": [],
        "tests": [
          {
            "title": "should return 200 OK",
            "fullTitle": "GET / should return 200 OK",
            "timedOut": false,
            "duration": 1008,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(app)\n  .get('/')\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "46cc9071-f90a-43bc-a163-3c7b344bb47d",
            "parentUUID": "62c77318-4435-4d1b-9fe2-16dbc1f7648f",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\app.js",
        "uuid": "62c77318-4435-4d1b-9fe2-16dbc1f7648f",
        "failedHooks": [],
        "fullFile": "C:\\Users\\HungLk1\\workspace\\cme-app\\test\\app.js",
        "passes": [
          {
            "title": "should return 200 OK",
            "fullTitle": "GET / should return 200 OK",
            "timedOut": false,
            "duration": 1008,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(app)\n  .get('/')\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "46cc9071-f90a-43bc-a163-3c7b344bb47d",
            "parentUUID": "62c77318-4435-4d1b-9fe2-16dbc1f7648f",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasFailedHooks": false,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1008,
        "rootEmpty": false
      },
      {
        "title": "GET /login",
        "suites": [],
        "tests": [
          {
            "title": "should return 200 OK",
            "fullTitle": "GET /login should return 200 OK",
            "timedOut": false,
            "duration": 252,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(app)\n  .get('/login')\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "1b0107be-6c50-4243-aecd-d10b44ed876f",
            "parentUUID": "14748c23-0a23-4abc-8941-fbdde277f33c",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\app.js",
        "uuid": "14748c23-0a23-4abc-8941-fbdde277f33c",
        "failedHooks": [],
        "fullFile": "C:\\Users\\HungLk1\\workspace\\cme-app\\test\\app.js",
        "passes": [
          {
            "title": "should return 200 OK",
            "fullTitle": "GET /login should return 200 OK",
            "timedOut": false,
            "duration": 252,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(app)\n  .get('/login')\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "1b0107be-6c50-4243-aecd-d10b44ed876f",
            "parentUUID": "14748c23-0a23-4abc-8941-fbdde277f33c",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasFailedHooks": false,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 252,
        "rootEmpty": false
      },
      {
        "title": "GET /signup",
        "suites": [],
        "tests": [
          {
            "title": "should return 200 OK",
            "fullTitle": "GET /signup should return 200 OK",
            "timedOut": false,
            "duration": 127,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(app)\n  .get('/signup')\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "560fe09a-2009-4ae1-82ba-9e49103851d2",
            "parentUUID": "45213110-ac3b-4dcd-b9d9-f11593a3cf46",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\app.js",
        "uuid": "45213110-ac3b-4dcd-b9d9-f11593a3cf46",
        "failedHooks": [],
        "fullFile": "C:\\Users\\HungLk1\\workspace\\cme-app\\test\\app.js",
        "passes": [
          {
            "title": "should return 200 OK",
            "fullTitle": "GET /signup should return 200 OK",
            "timedOut": false,
            "duration": 127,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(app)\n  .get('/signup')\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "560fe09a-2009-4ae1-82ba-9e49103851d2",
            "parentUUID": "45213110-ac3b-4dcd-b9d9-f11593a3cf46",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasFailedHooks": false,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 127,
        "rootEmpty": false
      },
      {
        "title": "GET /api",
        "suites": [],
        "tests": [
          {
            "title": "should return 200 OK",
            "fullTitle": "GET /api should return 200 OK",
            "timedOut": false,
            "duration": 277,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(app)\n  .get('/api')\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "6aef4bad-9821-49fa-9b00-6ba019b393a7",
            "parentUUID": "199ca6da-ce1d-46cc-9aa2-87acc994e209",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\app.js",
        "uuid": "199ca6da-ce1d-46cc-9aa2-87acc994e209",
        "failedHooks": [],
        "fullFile": "C:\\Users\\HungLk1\\workspace\\cme-app\\test\\app.js",
        "passes": [
          {
            "title": "should return 200 OK",
            "fullTitle": "GET /api should return 200 OK",
            "timedOut": false,
            "duration": 277,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(app)\n  .get('/api')\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "6aef4bad-9821-49fa-9b00-6ba019b393a7",
            "parentUUID": "199ca6da-ce1d-46cc-9aa2-87acc994e209",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasFailedHooks": false,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 277,
        "rootEmpty": false
      },
      {
        "title": "GET /contact",
        "suites": [],
        "tests": [
          {
            "title": "should return 200 OK",
            "fullTitle": "GET /contact should return 200 OK",
            "timedOut": false,
            "duration": 135,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(app)\n  .get('/contact')\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "0b42d9bd-f778-418c-8b1f-0cfe2cc96b77",
            "parentUUID": "0b0f7ed1-4d5a-4753-993d-e98204a87ef4",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\app.js",
        "uuid": "0b0f7ed1-4d5a-4753-993d-e98204a87ef4",
        "failedHooks": [],
        "fullFile": "C:\\Users\\HungLk1\\workspace\\cme-app\\test\\app.js",
        "passes": [
          {
            "title": "should return 200 OK",
            "fullTitle": "GET /contact should return 200 OK",
            "timedOut": false,
            "duration": 135,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(app)\n  .get('/contact')\n  .expect(200, done);",
            "err": {},
            "isRoot": false,
            "uuid": "0b42d9bd-f778-418c-8b1f-0cfe2cc96b77",
            "parentUUID": "0b0f7ed1-4d5a-4753-993d-e98204a87ef4",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasFailedHooks": false,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 135,
        "rootEmpty": false
      },
      {
        "title": "GET /random-url",
        "suites": [],
        "tests": [
          {
            "title": "should return 404",
            "fullTitle": "GET /random-url should return 404",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(app)\n  .get('/reset')\n  .expect(404, done);",
            "err": {},
            "isRoot": false,
            "uuid": "265f354f-01be-434a-9c1a-42ed7db7358a",
            "parentUUID": "aa146add-6811-48e9-967a-7b840b7dee79",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\app.js",
        "uuid": "aa146add-6811-48e9-967a-7b840b7dee79",
        "failedHooks": [],
        "fullFile": "C:\\Users\\HungLk1\\workspace\\cme-app\\test\\app.js",
        "passes": [
          {
            "title": "should return 404",
            "fullTitle": "GET /random-url should return 404",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(app)\n  .get('/reset')\n  .expect(404, done);",
            "err": {},
            "isRoot": false,
            "uuid": "265f354f-01be-434a-9c1a-42ed7db7358a",
            "parentUUID": "aa146add-6811-48e9-967a-7b840b7dee79",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasFailedHooks": false,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 10,
        "rootEmpty": false
      },
      {
        "title": "User Model",
        "suites": [],
        "tests": [
          {
            "title": "should create a new user",
            "fullTitle": "User Model should create a new user",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const UserMock = sinon.mock(new User({ email: 'test@gmail.com', password: 'root' }));\nconst user = UserMock.object;\nUserMock\n  .expects('save')\n  .yields(null);\nuser.save(function (err, result) {\n  UserMock.verify();\n  UserMock.restore();\n  expect(err).to.be.null;\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "35c80e99-7bb8-4126-99c2-e39eaf0e00f2",
            "parentUUID": "53e114e1-48f7-41a4-b02a-f148b4626799",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return error if user is not created",
            "fullTitle": "User Model should return error if user is not created",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const UserMock = sinon.mock(new User({ email: 'test@gmail.com', password: 'root' }));\nconst user = UserMock.object;\nconst expectedError = {\n  name: 'ValidationError'\n};\nUserMock\n  .expects('save')\n  .yields(expectedError);\nuser.save((err, result) => {\n  UserMock.verify();\n  UserMock.restore();\n  expect(err.name).to.equal('ValidationError');\n  expect(result).to.be.undefined;\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "2584d8a5-ff09-418c-b70d-126f6f38dbac",
            "parentUUID": "53e114e1-48f7-41a4-b02a-f148b4626799",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should not create a user with the unique email",
            "fullTitle": "User Model should not create a user with the unique email",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const UserMock = sinon.mock(User({ email: 'test@gmail.com', password: 'root' }));\nconst user = UserMock.object;\nconst expectedError = {\n  name: 'MongoError',\n  code: 11000\n};\nUserMock\n  .expects('save')\n  .yields(expectedError);\nuser.save((err, result) => {\n  UserMock.verify();\n  UserMock.restore();\n  expect(err.name).to.equal('MongoError');\n  expect(err.code).to.equal(11000);\n  expect(result).to.be.undefined;\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7cb88cdc-147e-4e29-a58c-2905b9ad20e8",
            "parentUUID": "53e114e1-48f7-41a4-b02a-f148b4626799",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should find user by email",
            "fullTitle": "User Model should find user by email",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const userMock = sinon.mock(User);\nconst expectedUser = {\n  _id: '5700a128bd97c1341d8fb365',\n  email: 'test@gmail.com'\n};\nuserMock\n  .expects('findOne')\n  .withArgs({ email: 'test@gmail.com' })\n  .yields(null, expectedUser);\nUser.findOne({ email: 'test@gmail.com' }, (err, result) => {\n  userMock.verify();\n  userMock.restore();\n  expect(result.email).to.equal('test@gmail.com');\n  done();\n})",
            "err": {},
            "isRoot": false,
            "uuid": "e2601b28-b701-472a-a030-42abd3672e92",
            "parentUUID": "53e114e1-48f7-41a4-b02a-f148b4626799",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should remove user by email",
            "fullTitle": "User Model should remove user by email",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const userMock = sinon.mock(User);\nconst expectedResult = {\n  nRemoved: 1\n};\nuserMock\n  .expects('remove')\n  .withArgs({ email: 'test@gmail.com' })\n  .yields(null, expectedResult);\nUser.remove({ email: 'test@gmail.com' }, (err, result) => {\n  userMock.verify();\n  userMock.restore();\n  expect(err).to.be.null;\n  expect(result.nRemoved).to.equal(1);\n  done();\n})",
            "err": {},
            "isRoot": false,
            "uuid": "925167af-4343-43b3-b89f-1b85e342ca82",
            "parentUUID": "53e114e1-48f7-41a4-b02a-f148b4626799",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\models.js",
        "uuid": "53e114e1-48f7-41a4-b02a-f148b4626799",
        "failedHooks": [],
        "fullFile": "C:\\Users\\HungLk1\\workspace\\cme-app\\test\\models.js",
        "passes": [
          {
            "title": "should create a new user",
            "fullTitle": "User Model should create a new user",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const UserMock = sinon.mock(new User({ email: 'test@gmail.com', password: 'root' }));\nconst user = UserMock.object;\nUserMock\n  .expects('save')\n  .yields(null);\nuser.save(function (err, result) {\n  UserMock.verify();\n  UserMock.restore();\n  expect(err).to.be.null;\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "35c80e99-7bb8-4126-99c2-e39eaf0e00f2",
            "parentUUID": "53e114e1-48f7-41a4-b02a-f148b4626799",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return error if user is not created",
            "fullTitle": "User Model should return error if user is not created",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const UserMock = sinon.mock(new User({ email: 'test@gmail.com', password: 'root' }));\nconst user = UserMock.object;\nconst expectedError = {\n  name: 'ValidationError'\n};\nUserMock\n  .expects('save')\n  .yields(expectedError);\nuser.save((err, result) => {\n  UserMock.verify();\n  UserMock.restore();\n  expect(err.name).to.equal('ValidationError');\n  expect(result).to.be.undefined;\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "2584d8a5-ff09-418c-b70d-126f6f38dbac",
            "parentUUID": "53e114e1-48f7-41a4-b02a-f148b4626799",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should not create a user with the unique email",
            "fullTitle": "User Model should not create a user with the unique email",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const UserMock = sinon.mock(User({ email: 'test@gmail.com', password: 'root' }));\nconst user = UserMock.object;\nconst expectedError = {\n  name: 'MongoError',\n  code: 11000\n};\nUserMock\n  .expects('save')\n  .yields(expectedError);\nuser.save((err, result) => {\n  UserMock.verify();\n  UserMock.restore();\n  expect(err.name).to.equal('MongoError');\n  expect(err.code).to.equal(11000);\n  expect(result).to.be.undefined;\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7cb88cdc-147e-4e29-a58c-2905b9ad20e8",
            "parentUUID": "53e114e1-48f7-41a4-b02a-f148b4626799",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should find user by email",
            "fullTitle": "User Model should find user by email",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const userMock = sinon.mock(User);\nconst expectedUser = {\n  _id: '5700a128bd97c1341d8fb365',\n  email: 'test@gmail.com'\n};\nuserMock\n  .expects('findOne')\n  .withArgs({ email: 'test@gmail.com' })\n  .yields(null, expectedUser);\nUser.findOne({ email: 'test@gmail.com' }, (err, result) => {\n  userMock.verify();\n  userMock.restore();\n  expect(result.email).to.equal('test@gmail.com');\n  done();\n})",
            "err": {},
            "isRoot": false,
            "uuid": "e2601b28-b701-472a-a030-42abd3672e92",
            "parentUUID": "53e114e1-48f7-41a4-b02a-f148b4626799",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should remove user by email",
            "fullTitle": "User Model should remove user by email",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const userMock = sinon.mock(User);\nconst expectedResult = {\n  nRemoved: 1\n};\nuserMock\n  .expects('remove')\n  .withArgs({ email: 'test@gmail.com' })\n  .yields(null, expectedResult);\nUser.remove({ email: 'test@gmail.com' }, (err, result) => {\n  userMock.verify();\n  userMock.restore();\n  expect(err).to.be.null;\n  expect(result.nRemoved).to.equal(1);\n  done();\n})",
            "err": {},
            "isRoot": false,
            "uuid": "925167af-4343-43b3-b89f-1b85e342ca82",
            "parentUUID": "53e114e1-48f7-41a4-b02a-f148b4626799",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasFailedHooks": false,
        "hasSuites": false,
        "totalTests": 5,
        "totalPasses": 5,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 21,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "71ef02d1-85e3-4452-a4c0-e7bd2b0f0c52",
    "failedHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasFailedHooks": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should return 200 OK",
      "fullTitle": "GET / should return 200 OK",
      "timedOut": false,
      "duration": 1008,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(app)\n  .get('/')\n  .expect(200, done);",
      "err": {},
      "isRoot": false,
      "uuid": "46cc9071-f90a-43bc-a163-3c7b344bb47d",
      "parentUUID": "62c77318-4435-4d1b-9fe2-16dbc1f7648f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return 200 OK",
      "fullTitle": "GET /login should return 200 OK",
      "timedOut": false,
      "duration": 252,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(app)\n  .get('/login')\n  .expect(200, done);",
      "err": {},
      "isRoot": false,
      "uuid": "1b0107be-6c50-4243-aecd-d10b44ed876f",
      "parentUUID": "14748c23-0a23-4abc-8941-fbdde277f33c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return 200 OK",
      "fullTitle": "GET /signup should return 200 OK",
      "timedOut": false,
      "duration": 127,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(app)\n  .get('/signup')\n  .expect(200, done);",
      "err": {},
      "isRoot": false,
      "uuid": "560fe09a-2009-4ae1-82ba-9e49103851d2",
      "parentUUID": "45213110-ac3b-4dcd-b9d9-f11593a3cf46",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return 200 OK",
      "fullTitle": "GET /api should return 200 OK",
      "timedOut": false,
      "duration": 277,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(app)\n  .get('/api')\n  .expect(200, done);",
      "err": {},
      "isRoot": false,
      "uuid": "6aef4bad-9821-49fa-9b00-6ba019b393a7",
      "parentUUID": "199ca6da-ce1d-46cc-9aa2-87acc994e209",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return 200 OK",
      "fullTitle": "GET /contact should return 200 OK",
      "timedOut": false,
      "duration": 135,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(app)\n  .get('/contact')\n  .expect(200, done);",
      "err": {},
      "isRoot": false,
      "uuid": "0b42d9bd-f778-418c-8b1f-0cfe2cc96b77",
      "parentUUID": "0b0f7ed1-4d5a-4753-993d-e98204a87ef4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return 404",
      "fullTitle": "GET /random-url should return 404",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(app)\n  .get('/reset')\n  .expect(404, done);",
      "err": {},
      "isRoot": false,
      "uuid": "265f354f-01be-434a-9c1a-42ed7db7358a",
      "parentUUID": "aa146add-6811-48e9-967a-7b840b7dee79",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should create a new user",
      "fullTitle": "User Model should create a new user",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const UserMock = sinon.mock(new User({ email: 'test@gmail.com', password: 'root' }));\nconst user = UserMock.object;\nUserMock\n  .expects('save')\n  .yields(null);\nuser.save(function (err, result) {\n  UserMock.verify();\n  UserMock.restore();\n  expect(err).to.be.null;\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "35c80e99-7bb8-4126-99c2-e39eaf0e00f2",
      "parentUUID": "53e114e1-48f7-41a4-b02a-f148b4626799",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return error if user is not created",
      "fullTitle": "User Model should return error if user is not created",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const UserMock = sinon.mock(new User({ email: 'test@gmail.com', password: 'root' }));\nconst user = UserMock.object;\nconst expectedError = {\n  name: 'ValidationError'\n};\nUserMock\n  .expects('save')\n  .yields(expectedError);\nuser.save((err, result) => {\n  UserMock.verify();\n  UserMock.restore();\n  expect(err.name).to.equal('ValidationError');\n  expect(result).to.be.undefined;\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "2584d8a5-ff09-418c-b70d-126f6f38dbac",
      "parentUUID": "53e114e1-48f7-41a4-b02a-f148b4626799",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should not create a user with the unique email",
      "fullTitle": "User Model should not create a user with the unique email",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const UserMock = sinon.mock(User({ email: 'test@gmail.com', password: 'root' }));\nconst user = UserMock.object;\nconst expectedError = {\n  name: 'MongoError',\n  code: 11000\n};\nUserMock\n  .expects('save')\n  .yields(expectedError);\nuser.save((err, result) => {\n  UserMock.verify();\n  UserMock.restore();\n  expect(err.name).to.equal('MongoError');\n  expect(err.code).to.equal(11000);\n  expect(result).to.be.undefined;\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7cb88cdc-147e-4e29-a58c-2905b9ad20e8",
      "parentUUID": "53e114e1-48f7-41a4-b02a-f148b4626799",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should find user by email",
      "fullTitle": "User Model should find user by email",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const userMock = sinon.mock(User);\nconst expectedUser = {\n  _id: '5700a128bd97c1341d8fb365',\n  email: 'test@gmail.com'\n};\nuserMock\n  .expects('findOne')\n  .withArgs({ email: 'test@gmail.com' })\n  .yields(null, expectedUser);\nUser.findOne({ email: 'test@gmail.com' }, (err, result) => {\n  userMock.verify();\n  userMock.restore();\n  expect(result.email).to.equal('test@gmail.com');\n  done();\n})",
      "err": {},
      "isRoot": false,
      "uuid": "e2601b28-b701-472a-a030-42abd3672e92",
      "parentUUID": "53e114e1-48f7-41a4-b02a-f148b4626799",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should remove user by email",
      "fullTitle": "User Model should remove user by email",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const userMock = sinon.mock(User);\nconst expectedResult = {\n  nRemoved: 1\n};\nuserMock\n  .expects('remove')\n  .withArgs({ email: 'test@gmail.com' })\n  .yields(null, expectedResult);\nUser.remove({ email: 'test@gmail.com' }, (err, result) => {\n  userMock.verify();\n  userMock.restore();\n  expect(err).to.be.null;\n  expect(result.nRemoved).to.equal(1);\n  done();\n})",
      "err": {},
      "isRoot": false,
      "uuid": "925167af-4343-43b3-b89f-1b85e342ca82",
      "parentUUID": "53e114e1-48f7-41a4-b02a-f148b4626799",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should return 200 OK",
      "fullTitle": "GET / should return 200 OK",
      "timedOut": false,
      "duration": 1008,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(app)\n  .get('/')\n  .expect(200, done);",
      "err": {},
      "isRoot": false,
      "uuid": "46cc9071-f90a-43bc-a163-3c7b344bb47d",
      "parentUUID": "62c77318-4435-4d1b-9fe2-16dbc1f7648f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return 200 OK",
      "fullTitle": "GET /login should return 200 OK",
      "timedOut": false,
      "duration": 252,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(app)\n  .get('/login')\n  .expect(200, done);",
      "err": {},
      "isRoot": false,
      "uuid": "1b0107be-6c50-4243-aecd-d10b44ed876f",
      "parentUUID": "14748c23-0a23-4abc-8941-fbdde277f33c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return 200 OK",
      "fullTitle": "GET /signup should return 200 OK",
      "timedOut": false,
      "duration": 127,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(app)\n  .get('/signup')\n  .expect(200, done);",
      "err": {},
      "isRoot": false,
      "uuid": "560fe09a-2009-4ae1-82ba-9e49103851d2",
      "parentUUID": "45213110-ac3b-4dcd-b9d9-f11593a3cf46",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return 200 OK",
      "fullTitle": "GET /api should return 200 OK",
      "timedOut": false,
      "duration": 277,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(app)\n  .get('/api')\n  .expect(200, done);",
      "err": {},
      "isRoot": false,
      "uuid": "6aef4bad-9821-49fa-9b00-6ba019b393a7",
      "parentUUID": "199ca6da-ce1d-46cc-9aa2-87acc994e209",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return 200 OK",
      "fullTitle": "GET /contact should return 200 OK",
      "timedOut": false,
      "duration": 135,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(app)\n  .get('/contact')\n  .expect(200, done);",
      "err": {},
      "isRoot": false,
      "uuid": "0b42d9bd-f778-418c-8b1f-0cfe2cc96b77",
      "parentUUID": "0b0f7ed1-4d5a-4753-993d-e98204a87ef4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return 404",
      "fullTitle": "GET /random-url should return 404",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(app)\n  .get('/reset')\n  .expect(404, done);",
      "err": {},
      "isRoot": false,
      "uuid": "265f354f-01be-434a-9c1a-42ed7db7358a",
      "parentUUID": "aa146add-6811-48e9-967a-7b840b7dee79",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should create a new user",
      "fullTitle": "User Model should create a new user",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const UserMock = sinon.mock(new User({ email: 'test@gmail.com', password: 'root' }));\nconst user = UserMock.object;\nUserMock\n  .expects('save')\n  .yields(null);\nuser.save(function (err, result) {\n  UserMock.verify();\n  UserMock.restore();\n  expect(err).to.be.null;\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "35c80e99-7bb8-4126-99c2-e39eaf0e00f2",
      "parentUUID": "53e114e1-48f7-41a4-b02a-f148b4626799",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return error if user is not created",
      "fullTitle": "User Model should return error if user is not created",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const UserMock = sinon.mock(new User({ email: 'test@gmail.com', password: 'root' }));\nconst user = UserMock.object;\nconst expectedError = {\n  name: 'ValidationError'\n};\nUserMock\n  .expects('save')\n  .yields(expectedError);\nuser.save((err, result) => {\n  UserMock.verify();\n  UserMock.restore();\n  expect(err.name).to.equal('ValidationError');\n  expect(result).to.be.undefined;\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "2584d8a5-ff09-418c-b70d-126f6f38dbac",
      "parentUUID": "53e114e1-48f7-41a4-b02a-f148b4626799",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should not create a user with the unique email",
      "fullTitle": "User Model should not create a user with the unique email",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const UserMock = sinon.mock(User({ email: 'test@gmail.com', password: 'root' }));\nconst user = UserMock.object;\nconst expectedError = {\n  name: 'MongoError',\n  code: 11000\n};\nUserMock\n  .expects('save')\n  .yields(expectedError);\nuser.save((err, result) => {\n  UserMock.verify();\n  UserMock.restore();\n  expect(err.name).to.equal('MongoError');\n  expect(err.code).to.equal(11000);\n  expect(result).to.be.undefined;\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7cb88cdc-147e-4e29-a58c-2905b9ad20e8",
      "parentUUID": "53e114e1-48f7-41a4-b02a-f148b4626799",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should find user by email",
      "fullTitle": "User Model should find user by email",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const userMock = sinon.mock(User);\nconst expectedUser = {\n  _id: '5700a128bd97c1341d8fb365',\n  email: 'test@gmail.com'\n};\nuserMock\n  .expects('findOne')\n  .withArgs({ email: 'test@gmail.com' })\n  .yields(null, expectedUser);\nUser.findOne({ email: 'test@gmail.com' }, (err, result) => {\n  userMock.verify();\n  userMock.restore();\n  expect(result.email).to.equal('test@gmail.com');\n  done();\n})",
      "err": {},
      "isRoot": false,
      "uuid": "e2601b28-b701-472a-a030-42abd3672e92",
      "parentUUID": "53e114e1-48f7-41a4-b02a-f148b4626799",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should remove user by email",
      "fullTitle": "User Model should remove user by email",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const userMock = sinon.mock(User);\nconst expectedResult = {\n  nRemoved: 1\n};\nuserMock\n  .expects('remove')\n  .withArgs({ email: 'test@gmail.com' })\n  .yields(null, expectedResult);\nUser.remove({ email: 'test@gmail.com' }, (err, result) => {\n  userMock.verify();\n  userMock.restore();\n  expect(err).to.be.null;\n  expect(result.nRemoved).to.equal(1);\n  done();\n})",
      "err": {},
      "isRoot": false,
      "uuid": "925167af-4343-43b3-b89f-1b85e342ca82",
      "parentUUID": "53e114e1-48f7-41a4-b02a-f148b4626799",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}